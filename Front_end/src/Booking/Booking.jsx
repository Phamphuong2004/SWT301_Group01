import React, { useState, useEffect } from "react";
import DatePicker from "react-datepicker";
import "react-datepicker/dist/react-datepicker.css";
import provinces from "../Provinces";
import ADNTestingServices from "../listOfServices";
import "./Booking.css";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { toast } from "react-toastify";
import serviceTypes from "../serviceTypes";

const genders = ["Nam", "N·ªØ", "Kh√°c"];
const testPurposes = ["H√†nh ch√≠nh", "D√¢n s·ª±"];

const testCategories = [
  "Cha - Con",
  "M·∫π - Con",
  "Anh - Em",
  "Ch·ªã - Em",
  "√îng - Ch√°u",
  "B√† - Ch√°u",
  "Song sinh",
  "H·ªç h√†ng",
  "Kh√°c",
  "Ch√∫ - Ch√°u",
  "C√¥ - Ch√°u",
  "D√¨ - Ch√°u",
  "B√°c - Ch√°u",
  "Ch√°u n·ªôi",
  "Ch√°u ngo·∫°i",
];

function Booking() {
  const [form, setForm] = useState({
    fullName: "",
    dob: "",
    phone: "",
    email: "",
    gender: "",
    testPurpose: "",
    serviceType: "",
    appointmentDate: "",
    collectionTime: "",
    fingerprintFile: "",
    district: "",
    province: "",
    testCategory: "",
  });

  const [districts, setDistricts] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const navigate = useNavigate();
  const [guestSuccess, setGuestSuccess] = useState(false);
  const [guestInfo, setGuestInfo] = useState({});

  const handleChange = (e) => {
    const { name, value } = e.target;
    console.log("Thay ƒë·ªïi:", name, value);
    if (name === "province") {
      const selected = provinces.find((p) => p.name === value);
      setDistricts(selected ? selected.districts : []);
      setForm((prev) => ({ ...prev, province: value, district: "" }));
    } else {
      setForm((prev) => ({ ...prev, [name]: value }));
    }
  };

  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setForm((prev) => ({ ...prev, fingerprintFile: file.name }));
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    console.log("Gi√° tr·ªã g·ª≠i l√™n:", form);
    setIsLoading(true);
    try {
      const datePart = form.appointmentDate
        ? form.appointmentDate.split("T")[0]
        : "";
      let timePart = form.collectionTime;
      if (timePart && timePart.length === 5) timePart += ":00";
      const collectionTimeStr =
        datePart && timePart ? `${datePart}T${timePart}` : null;

      const selectedService = serviceTypes.find(
        (s) => s.service_id.toString() === form.serviceType
      );
      const data = {
        ...form,
        serviceType: selectedService ? selectedService.service_name : "",
        collectionTime: collectionTimeStr,
      };

      const userString = localStorage.getItem("user");
      const serviceId = form.serviceType;
      if (!serviceId) {
        toast.error("Vui l√≤ng ch·ªçn lo·∫°i d·ªãch v·ª•!");
        setIsLoading(false);
        return;
      }

      let response;
      if (!userString) {
        // N·∫øu ch∆∞a ƒëƒÉng nh·∫≠p, g·ªçi API guest
        response = await axios.post(
          `/api/create/guest-appointment/${serviceId}`,
          data
        );
        if (response.status === 201 && response.data?.appointmentId) {
          setGuestSuccess(true);
          setGuestInfo({
            appointmentId: response.data.appointmentId,
            email: form.email,
            phone: form.phone,
          });
          localStorage.setItem("lastServiceId", response.data.appointmentId);
          // Kh√¥ng chuy·ªÉn h∆∞·ªõng v·ªÅ trang ch·ªß n·ªØa!
        } else {
          toast.error("C√≥ l·ªói x·∫£y ra, kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ l·ªãch h·∫πn.");
        }
        setIsLoading(false);
        return;
      }
      // ƒê√£ ƒëƒÉng nh·∫≠p, gi·ªØ nguy√™n logic c≈©
      const user = JSON.parse(userString);
      const token = user.token;
      response = await axios.post(
        `/api/create-appointment/${serviceId}`,
        data,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (response.status === 201 && response.data?.appointmentId) {
        toast.success("ƒê·∫∑t l·ªãch h·∫πn th√†nh c√¥ng!");
        localStorage.setItem("lastServiceId", response.data.appointmentId);
        const appointmentDataForState = {
          ...form,
          appointmentId: response.data.appointmentId,
          status: "PENDING",
          collectionSampleTime: data.collectionTime,
          user: { username: user.username },
        };
        delete appointmentDataForState.collectionTime;
        navigate("/payment", {
          state: { appointment: appointmentDataForState },
        });
      } else {
        toast.error("C√≥ l·ªói x·∫£y ra, kh√¥ng nh·∫≠n ƒë∆∞·ª£c m√£ l·ªãch h·∫πn.");
        navigate("/history");
      }
    } catch (err) {
      toast.error(
        err.response?.data?.message ||
          "ƒê·∫∑t l·ªãch h·∫πn th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i!"
      );
    } finally {
      setIsLoading(false);
    }
  };

  if (guestSuccess) {
    return (
      <div className="booking-success-container">
        <h2>ƒê·∫∑t l·ªãch th√†nh c√¥ng!</h2>
        <p>
          M√£ ƒë∆°n c·ªßa b·∫°n: <b>{guestInfo.appointmentId}</b>
        </p>
        <p>
          Email: <b>{guestInfo.email}</b>
        </p>
        <p>
          S·ªë ƒëi·ªán tho·∫°i: <b>{guestInfo.phone}</b>
        </p>
        <p>
          Vui l√≤ng l∆∞u l·∫°i m√£ ƒë∆°n, email v√† s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ tra c·ª©u ho·∫∑c theo
          d√µi ƒë∆°n.
        </p>
        <button
          onClick={() => {
            navigate("/history", {
              state: {
                guestEmail: guestInfo.email,
                guestPhone: guestInfo.phone,
                appointmentId: guestInfo.appointmentId,
              },
            });
          }}
        >
          Theo d√µi ƒë∆°n
        </button>
      </div>
    );
  }

  return (
    <div className="booking-page">
      <form className="booking-form" onSubmit={handleSubmit}>
        <h2 className="booking-title">ƒê·∫∑t l·ªãch h·∫πn x√©t nghi·ªám ADN</h2>
        <div className="booking-row">
          <div className="booking-col">
            <label>
              H·ªç v√† t√™n
              <input
                type="text"
                name="fullName"
                value={form.fullName}
                onChange={handleChange}
                placeholder="Nh·∫≠p h·ªç v√† t√™n"
                required
              />
            </label>
            <label>
              Ng√†y sinh
              <div style={{ position: "relative" }}>
                <DatePicker
                  selected={form.dob ? new Date(form.dob) : null}
                  onChange={(date) => {
                    setForm((prev) => ({
                      ...prev,
                      dob: date ? date.toISOString().slice(0, 10) : "",
                    }));
                  }}
                  dateFormat="dd/MM/yyyy"
                  placeholderText="Ch·ªçn ng√†y sinh"
                  className="booking-datepicker-input"
                  maxDate={new Date()}
                  showMonthDropdown
                  showYearDropdown
                  dropdownMode="select"
                  customInput={
                    <div style={{ display: "flex", alignItems: "center" }}>
                      <input
                        type="text"
                        value={
                          form.dob
                            ? form.dob.split("-").reverse().join("/")
                            : ""
                        }
                        readOnly
                        placeholder="Ch·ªçn ng√†y sinh"
                        style={{ width: "100%", paddingRight: 32 }}
                        className="booking-datepicker-input"
                      />
                      <span
                        style={{
                          position: "absolute",
                          right: 8,
                          cursor: "pointer",
                          fontSize: 20,
                        }}
                        onClick={(e) => {
                          e.target.previousSibling &&
                            e.target.previousSibling.focus &&
                            e.target.previousSibling.focus();
                        }}
                        title="Ch·ªçn ng√†y sinh"
                        role="button"
                        tabIndex={0}
                      >
                        üìÖ
                      </span>
                    </div>
                  }
                />
              </div>
            </label>
            <label>
              S·ªë ƒëi·ªán tho·∫°i
              <input
                type="text"
                name="phone"
                value={form.phone}
                onChange={handleChange}
                placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                required
              />
            </label>
            <label>
              Email
              <input
                type="email"
                name="email"
                value={form.email}
                onChange={handleChange}
                placeholder="Nh·∫≠p email"
              />
            </label>
            <label>
              Gi·ªõi t√≠nh
              <select
                name="gender"
                value={form.gender}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn gi·ªõi t√≠nh</option>
                <option value="Nam">Nam</option>
                <option value="N·ªØ">N·ªØ</option>
                <option value="Kh√°c">Kh√°c</option>
              </select>
            </label>
            <label>
              M·ª•c ƒë√≠ch x√©t nghi·ªám
              <select
                name="testPurpose"
                value={form.testPurpose}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn m·ª•c ƒë√≠ch</option>
                {testPurposes.map((purpose) => (
                  <option key={purpose} value={purpose}>
                    {purpose}
                  </option>
                ))}
              </select>
            </label>
            <label>
              Lo·∫°i d·ªãch v·ª•
              <select
                name="serviceType"
                value={form.serviceType}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn lo·∫°i d·ªãch v·ª•</option>
                {serviceTypes.map((type) => (
                  <option key={type.service_id} value={type.service_id}>
                    {type.service_name}
                  </option>
                ))}
              </select>
            </label>
            <label>
              Ng√†y & gi·ªù h·∫πn (ISO 8601)
              <input
                type="datetime-local"
                name="appointmentDate"
                value={form.appointmentDate}
                onChange={handleChange}
                required
              />
            </label>
            <label>
              Gi·ªù l·∫•y m·∫´u (collectionTime)
              <input
                type="time"
                name="collectionTime"
                value={form.collectionTime}
                onChange={handleChange}
                required
              />
            </label>
            <label>
              File v√¢n tay
              <input
                type="file"
                name="fingerprintFile"
                accept="image/*,.pdf"
                onChange={handleFileChange}
              />
            </label>
            <label>
              T·ªânh/Th√†nh ph·ªë
              <select
                name="province"
                value={form.province}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn t·ªânh/th√†nh ph·ªë</option>
                {provinces.map((p) => (
                  <option key={p.name} value={p.name}>
                    {p.name}
                  </option>
                ))}
              </select>
            </label>
            <label>
              Qu·∫≠n/Huy·ªán
              <select
                name="district"
                value={form.district}
                onChange={handleChange}
                required
                disabled={!form.province}
              >
                <option value="">Ch·ªçn Qu·∫≠n/Huy·ªán</option>
                {districts.map((d) => (
                  <option key={d} value={d}>
                    {d}
                  </option>
                ))}
              </select>
            </label>
            <label>
              Lo·∫°i x√©t nghi·ªám
              <select
                name="testCategory"
                value={form.testCategory}
                onChange={handleChange}
                required
              >
                <option value="">Ch·ªçn lo·∫°i x√©t nghi·ªám</option>
                {testCategories.map((cat) => (
                  <option key={cat} value={cat}>
                    {cat}
                  </option>
                ))}
              </select>
            </label>
          </div>
        </div>
        <div className="booking-submit">
          <button type="submit" disabled={isLoading}>
            {isLoading ? "ƒêang g·ª≠i..." : "ƒê·∫∑t l·ªãch h·∫πn"}
          </button>
        </div>
      </form>
    </div>
  );
}

export default Booking;
