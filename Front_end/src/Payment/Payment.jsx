import React, { useState, useEffect } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import ADNTestingServices from "../listOfServices";
import "./Payment.css";
import { toast } from "react-toastify";
import { createPayment } from "./PaymentApi";

const Payment = () => {
  const location = useLocation();
  const navigate = useNavigate();
  const { appointment: appointmentFromState } = location.state || {};

  const [appointment, setAppointment] = useState(appointmentFromState || null);
  const [loading, setLoading] = useState(false);
  const [paymentMethod, setPaymentMethod] = useState("");
  const [paymentSuccess, setPaymentSuccess] = useState(false);
  const [editForm, setEditForm] = useState(null);

  useEffect(() => {
    if (!appointment) {
      const appointmentId = localStorage.getItem("lastServiceId");
      if (appointmentId) {
        setLoading(true);
        fetch(`/api/view-appointment/${appointmentId}`)
          .then((res) => res.json())
          .then((data) => {
            setAppointment(data);
            setEditForm({
              fullName: data.fullName,
              appointmentDate: data.appointmentDate,
              collectionTime: data.collectionSampleTime, // l·∫•y ƒë√∫ng tr∆∞·ªùng gi·ªù l·∫•y m·∫´u
              serviceType: data.serviceType,
            });
          })
          .catch(() => {
            toast.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªãch h·∫πn");
          })
          .finally(() => setLoading(false));
      }
    } else {
      setEditForm({
        fullName: appointment.fullName,
        appointmentDate: appointment.appointmentDate,
        collectionTime: appointment.collectionSampleTime, // l·∫•y ƒë√∫ng tr∆∞·ªùng gi·ªù l·∫•y m·∫´u
        serviceType: appointment.serviceType,
      });
    }
  }, [appointment]);

  if (loading) return <div>ƒêang t·∫£i th√¥ng tin l·ªãch h·∫πn...</div>;

  if (!appointment || !editForm) {
    return (
      <div className="payment-container">
        <div className="payment-card" style={{ textAlign: "center" }}>
          <h1 className="payment-title">Kh√¥ng t√¨m th·∫•y th√¥ng tin l·ªãch h·∫πn</h1>
          <p style={{ margin: "1.5rem 0" }}>
            Vui l√≤ng quay l·∫°i v√† ƒë·∫∑t l·ªãch h·∫πn tr∆∞·ªõc khi thanh to√°n.
          </p>
          <button
            onClick={() => navigate("/booking")}
            className="btn btn-primary"
          >
            ƒê·∫∑t l·ªãch ngay
          </button>
        </div>
      </div>
    );
  }

  const serviceDetails = ADNTestingServices.find(
    (service) => service.testType === editForm.serviceType
  );

  const getTime = (str) => {
    if (!str || typeof str !== "string" || str.length < 16) return "";
    return str.substring(11, 16);
  };

  const handleEditChange = (e) => {
    const { name, value } = e.target;
    setEditForm((prev) => ({ ...prev, [name]: value }));
  };

  // X·ª≠ l√Ω thanh to√°n s·ª≠ d·ª•ng PaymentApi.js
  const handlePayment = async () => {
    if (!paymentMethod) {
      toast.warn("Vui l√≤ng ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n.");
      return;
    }
    setLoading(true);
    try {
      const userString = localStorage.getItem("user");
      const token = userString ? JSON.parse(userString).token : null;
      let status = "PENDING";
      if (paymentMethod.toLowerCase() === "online") status = "PAID";
      const paymentData = {
        appointmentId: appointment.appointmentId,
        amount: serviceDetails?.price || 1,
        paymentMethod: paymentMethod.toUpperCase(),
        status,
        paymentDate: new Date().toISOString(),
      };
      await createPayment(paymentData, token); // truy·ªÅn token n·∫øu c√≥, kh√¥ng c√≥ th√¨ truy·ªÅn null
      toast.success(
        "Thanh to√°n th√†nh c√¥ng! L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n."
      );
      setPaymentSuccess(true);
    } catch (err) {
      toast.error(
        "Thanh to√°n th·∫•t b·∫°i. " + (err.response?.data?.message || err.message)
      );
    } finally {
      setLoading(false);
    }
  };

  const handleBackToHome = () => {
    navigate("/");
  };

  if (paymentSuccess) {
    return (
      <div className="payment-container">
        <div className="payment-card success-card">
          <div className="success-icon">‚úì</div>
          <h1 className="payment-title success-title">
            Thanh to√°n th√†nh c√¥ng!
          </h1>
          <div className="success-message">
            <p>C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª• c·ªßa ch√∫ng t√¥i.</p>
            <p>
              L·ªãch h·∫πn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† s·∫Ω ƒë∆∞·ª£c x·ª≠ l√Ω trong th·ªùi gian
              s·ªõm nh·∫•t.
            </p>
          </div>
          <div className="appointment-summary">
            <h3>Th√¥ng tin l·ªãch h·∫πn:</h3>
            <p>
              <strong>H·ªç v√† t√™n:</strong> {editForm.fullName}
            </p>
            <p>
              <strong>Ng√†y h·∫πn:</strong>{" "}
              {new Date(editForm.appointmentDate).toLocaleDateString()}
            </p>
            <p>
              <strong>Gi·ªù l·∫•y m·∫´u:</strong> {getTime(editForm.collectionTime)}
            </p>
            <p>
              <strong>Lo·∫°i d·ªãch v·ª•:</strong> {editForm.serviceType}
            </p>
            <p>
              <strong>S·ªë ti·ªÅn:</strong> {serviceDetails?.price}
            </p>
          </div>
          <div className="success-actions">
            <button onClick={handleBackToHome} className="btn-home">
              Quay l·∫°i trang ch·ªß
            </button>
            <button
              onClick={() => navigate("/service-tracking")}
              className="btn-history"
            >
              Theo d√µi ƒë∆°n
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="payment-bg">
      <div className="payment-card payment-shadow">
        <h1 className="payment-title">X√°c nh·∫≠n v√† Thanh to√°n</h1>
        <div className="appointment-details">
          <h2 className="section-title">Chi ti·∫øt l·ªãch h·∫πn</h2>
          <div className="form-row">
            <label>
              <span className="label-title">H·ªç v√† t√™n:</span>
              <input
                type="text"
                name="fullName"
                value={editForm.fullName}
                onChange={handleEditChange}
                className="input-field"
              />
            </label>
            <label>
              <span className="label-title">Ng√†y h·∫πn:</span>
              <input
                type="date"
                name="appointmentDate"
                value={editForm.appointmentDate?.slice(0, 10) || ""}
                onChange={handleEditChange}
                className="input-field"
              />
            </label>
            <label>
              <span className="label-title">Gi·ªù l·∫•y m·∫´u:</span>
              <input
                type="text"
                value={editForm?.collectionTime || ""}
                readOnly
                disabled
              />
            </label>
            <label>
              <span className="label-title">Lo·∫°i d·ªãch v·ª•:</span>
              <input
                type="text"
                name="serviceType"
                value={editForm.serviceType}
                onChange={handleEditChange}
                className="input-field"
              />
            </label>
          </div>
        </div>
        {serviceDetails && (
          <div className="service-details">
            <h2 className="section-title">Chi ti·∫øt d·ªãch v·ª•</h2>
            <p>
              <strong>M√¥ t·∫£:</strong> {serviceDetails.description}
            </p>
            <p className="price">
              <strong>T·ªïng ti·ªÅn:</strong> {serviceDetails.price}
            </p>
          </div>
        )}
        <div className="payment-methods">
          <h2 className="section-title">Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n</h2>
          <div className="method-options">
            <label
              className={`method-option radio-large ${
                paymentMethod === "cash" ? "selected" : ""
              }`}
            >
              <input
                type="radio"
                id="cash"
                name="paymentMethod"
                value="cash"
                checked={paymentMethod === "cash"}
                onChange={() => setPaymentMethod("cash")}
              />
              <span className="radio-icon">üíµ</span>
              <span>Thanh to√°n khi ƒë·∫øn l·∫•y m·∫´u (COD)</span>
            </label>
            <label
              className={`method-option radio-large ${
                paymentMethod === "online" ? "selected" : ""
              }`}
            >
              <input
                type="radio"
                id="online"
                name="paymentMethod"
                value="online"
                checked={paymentMethod === "online"}
                onChange={() => setPaymentMethod("online")}
              />
              <span className="radio-icon">üí≥</span>
              <span>Thanh to√°n tr·ª±c tuy·∫øn (VNPAY, Momo, ...)</span>
            </label>
          </div>
        </div>
        {paymentMethod === "online" && (
          <div className="qr-section">
            <h3>Qu√©t m√£ QR ƒë·ªÉ thanh to√°n</h3>
            <div className="qr-box">
              <img
                src="z6747527619716_88085c5bdad6c2700ec8923daaf73e09.jpg"
                alt="QR code"
                className="qr-img"
              />
            </div>
            <p className="qr-note">
              Vui l√≤ng qu√©t m√£ QR b·∫±ng app ng√¢n h√†ng ho·∫∑c v√≠ ƒëi·ªán t·ª≠ ƒë·ªÉ thanh
              to√°n.
            </p>
            <ol className="qr-guide">
              <li>M·ªü ·ª©ng d·ª•ng ng√¢n h√†ng ho·∫∑c v√≠ ƒëi·ªán t·ª≠ tr√™n ƒëi·ªán tho·∫°i.</li>
              <li>Ch·ªçn t√≠nh nƒÉng qu√©t m√£ QR.</li>
              <li>Qu√©t m√£ QR hi·ªÉn th·ªã tr√™n m√†n h√¨nh.</li>
              <li>Ki·ªÉm tra th√¥ng tin v√† nh·∫≠p s·ªë ti·ªÅn (n·∫øu c·∫ßn).</li>
              <li>X√°c nh·∫≠n thanh to√°n.</li>
              <li>
                Nh·∫•n <b>"X√°c nh·∫≠n & Thanh to√°n"</b> b√™n d∆∞·ªõi sau khi ho√†n t·∫•t.
              </li>
            </ol>
          </div>
        )}
        <button
          className="btn-confirm"
          onClick={handlePayment}
          disabled={loading}
        >
          {loading ? "ƒêang x·ª≠ l√Ω..." : "X√°c nh·∫≠n & Thanh to√°n"}
        </button>
      </div>
    </div>
  );
};

export default Payment;
